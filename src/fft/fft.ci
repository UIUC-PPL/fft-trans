module fft {
  
  extern module fft_to_main;
  
  array [1D] fft: fft_to_main {
    entry fft();
    
    entry void from_transpose ( CProxy_transpose from_transpose );
    
    entry void from_main ( CProxy_main_to_fft from_main );
    
    entry void transposeDone(int iteration);

    entry void doFFT() {
      for(iteration = 0; iteration < 3; ++iteration) {
        atomic "transpose" {
          if(thisIndex == 0) CkPrintf("TRANSPOSING\n");
          m_transpose->sendTranspose(iteration, iteration == 0 ? in : out, out, *this);
        }

        when transposeDone[iteration](int iter) { }

        if (iteration < 2) atomic "compute" {
          fftw_execute(p1);
          if(iteration == 0) twiddle(validating ? 1 : -1);
        }
      }

      atomic {
        //TODO: reduce
        if(!validating) m_main.FFTDone();
        else {
          char filename[80];
          sprintf(filename, "%d-%ld.dump%d", numChares, N, thisIndex);
          //writeCommFile(n, in, filename);
          calcResidual();
        }
      }
    };
  };
  
};
