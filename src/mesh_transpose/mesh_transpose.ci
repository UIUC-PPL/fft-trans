module mesh_transpose
{

extern module MeshStreamer;
extern module transpose;

message MeshStreamerMessage<fftBuf>;

group MeshStreamerClient<fftBuf>;

group MeshStreamer<fftBuf>;

message fftMsg {
	int source;
};

array [1D] mesh_transpose:
		MeshStreamerClient<fftBuf>
{
	entry mesh_transpose();
    
    entry void size (uint32_t size);
	
	entry void receiveCombinedData(MeshStreamerMessage<fftBuf> *msg);
	
	entry void processData(fftMsg *m);
    
    entry void getTranspose(fftMsg *m);
	
	entry void receive(int iteration)
	{
		for(count = 0; count < numChares; ++count) {
			when getTranspose[iteration] (fftMsg *m) atomic {
				applyTranspose(m);
			}
		}
		
		atomic "freemem" {
			delete msg1;
		}
		
		atomic { user->transposeDone(iteration); }
	};
};

}
