module fft {
  extern module fftData;

  group fft : MeshStreamerGroupClient<fftw_complex> {
    entry fft(uint64_t N, CProxy_fftData data, int sign, CkCallback startCB);
    entry void streamerReady();
    entry void receiveArray(fftw_complex data[numItems], int numItems, int src);
    entry void doneStreaming();

    entry void doFFT(CkCallback doneCB, CProxy_GroupChunkMeshStreamer<fftw_complex> streamer) {
      for(iteration = 0; iteration < 3; ++iteration) {
        serial { initStreamer(streamer); }

        when streamerReady() serial { sendTranspose(iteration == 0 ? in : out); }

        for(count = 0; count < CkNumPes(); ++count)
          when receiveArray(fftw_complex data[numItems], int numItems, int src) serial {
            applyTranspose(data, numItems, src);
          }

        if (iteration < 2) serial {
          fftw_execute(p1);
          if(iteration == 0) twiddle(sign);
        }

        when doneStreaming() {}
      }

      serial { contribute(doneCB); }
    };
  };

  message MeshStreamerMessage<ChunkDataItem>;
  group MeshStreamerGroupClient<fftw_complex>;
  group GroupChunkMeshStreamer<fftw_complex>;
  group MeshStreamer<ChunkDataItem>;
};
