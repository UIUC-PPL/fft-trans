mainmodule fft1d {

  readonly CProxy_Main mainProxy;
  readonly int numChares;
  readonly uint64_t N;
  readonly uint64_t n;
  readonly CProxy_transpose transposer;

  message fftMsg {
    fftw_complex data[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void FFTReady();
    entry [reductiontarget] void FFTDone();
    entry [reductiontarget] void printResidual(double residual);
  };

  array [1D] fft {
    entry fft();
    entry void initValidation();
    entry [local] void transposeDone(int iteration);

    entry void doFFT() {
      for(iteration = 0; iteration < 3; ++iteration) {
        atomic "transpose" {
          if(thisIndex == 0)
            CkPrintf("TRANSPOSING\n");
          transposer[thisIndex].ckLocal()->sendTranspose(iteration, iteration == 0 ? in : out, this);
        }

        when transposeDone[iteration](int iter) { }

        if (iteration < 2) atomic "compute" {
          fftw_execute(p1);
          if(iteration == 0)
            twiddle(validating ? 1 : -1);
        }
      }

      atomic {
        if(!validating)
          contribute(CkCallback(CkReductionTarget(Main,FFTDone), mainProxy));
        else {
          char filename[80];
          sprintf(filename, "%d-%ld.dump%d", numChares, N, thisIndex);
          //writeCommFile(n, in, filename);
          calcResidual();
        }
      }
    };
  };

  array [1D] transpose {
    entry transpose();
  };

  array [1D] p2p_transpose : transpose {
    entry p2p_transpose();
    entry [local] void receive(int iteration) {
      for(count = 0; count < numChares; ++count)
        when getTranspose[iteration] (fftMsg *m) atomic {
          applyTranspose(m, fft_obj->out);
        }
      atomic { fft_obj->transposeDone(iteration); }
    };
    entry void getTranspose(fftMsg *m);
  };
};
