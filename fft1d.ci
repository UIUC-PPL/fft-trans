mainmodule fft1d {

  readonly int numChares;
  readonly CProxy_GroupChunkMeshStreamer<fftw_complex> aggregator;

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void FFTReady();
    entry [reductiontarget] void FFTDone();
  };

  group fft : MeshStreamerGroupClient<fftw_complex> {
    entry fft(uint64_t N, CProxy_Main mainProxy);
    entry void streamerReady();
    entry void receiveArray(fftw_complex data[numItems], int numItems, int src);
    entry void initValidation();
    entry [reductiontarget] void printResidual(double residual);
    entry void doneStreaming();

    entry void doFFT(CkCallback doneCB) {
      for(iteration = 0; iteration < 3; ++iteration) {
        serial {
          if(CkMyPe() == 0) CkPrintf("TRANSPOSING\n");
          initStreamer();
        }

        when streamerReady() serial { sendTranspose(iteration == 0 ? in : out); }

        for(count = 0; count < numChares; ++count)
          when receiveArray(fftw_complex data[numItems], int numItems, int src) serial {
            applyTranspose(data, numItems, src);
          }

        if (iteration < 2) serial {
          fftw_execute(p1);
          if(iteration == 0) twiddle(validating ? 1 : -1);
        }

        when doneStreaming() {}
      }

      serial {
        if(!validating)
          contribute(doneCB);
        else {
          char filename[80];
          sprintf(filename, "%d-%ld.dump%d", numChares, N, CkMyPe());
          writeCommFile(n, in, filename);
          calcResidual();
        }
      }
    };
   };

   message MeshStreamerMessage<ChunkDataItem>;
   group MeshStreamerGroupClient<fftw_complex>;
   group GroupChunkMeshStreamer<fftw_complex>;
   group MeshStreamer<ChunkDataItem>;
};
