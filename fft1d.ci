mainmodule fft1d {
  include "fft1d.h";

  readonly CProxy_Main mainProxy;
  readonly int numChares;
  readonly int N;

  message fftMsg {
    complex_t data[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry [reductiontarget] void FFTReady();
    entry [reductiontarget] void FFTDone();
    entry [reductiontarget] void printResidual(double residual);
  };

  array [1D] fft {
    entry fft();
    entry void initComplete();
    entry void prepTransposeDone();
    entry void getTranspose(fftMsg *m);
    entry void initValidation();

    entry void doFFT() {
      for (iteration = 0; iteration < 3; ++iteration) {
        serial "transpose" {
          if (thisIndex == 0) {
            CkPrintf("Transposing...\n");
          }
          prepTranspose();
        }

        when prepTransposeDone() serial {
          sendTranspose();
        }

        for (count = 0; count < numChares; ++count) {
          when getTranspose[iteration] (fftMsg *m) serial {
            applyTranspose(m);
          }
        }

        serial { transferTransposed(); }

        if (iteration < 2) serial "compute" {
          fftExecute();
          if (iteration == 0) {
            twiddle(validating ? 1 : -1);
          }
        }
      }

      serial {
        if (!validating) {
          contribute(CkCallback(CkReductionTarget(Main, FFTDone), mainProxy));
        } else {
          /*
          char filename[80];
          sprintf(filename, "%d-%d.dump%d", numChares, N, thisIndex);
          writeCommFile(n, in, filename);
          calcResidual();
          */
        }
      }
    };
  };
};
