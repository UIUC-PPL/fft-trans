mainmodule fft1d {

  readonly CProxy_Main mainProxy;
  readonly int numChares;
  readonly uint64_t N;

  message fftMsg {
    fftw_complex data[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void startFFT();
    entry void doneFFT();
    entry [reductiontarget] void printResidual(double residual);
  };

  array [1D] fft {
    entry fft();
    entry void getTranspose(fftMsg *m);
    entry void initValidation();

    entry void doFFT() {
      for(iteration = 0; iteration < 3; ++iteration) {
        atomic "transpose" {
          if(thisIndex == 0) {
            CkPrintf("TRANSPOSING\n");
	    if(iteration == 0)
	      start = CkWallTimer();
          }
          sendTranspose(iteration == 0 ? in : out);
        }

        for(count = 0; count < numChares; ++count)
          when getTranspose[iteration] (fftMsg *m) atomic {
            applyTranspose(m);
	    if(thisIndex == 0)
              time[iteration*2] = CkWallTimer() - start;
          }

        if (iteration < 2) atomic "compute" {
	  fftw_execute(p1);
          if(iteration == 0)
            twiddle(validating ? 1 : -1);
        }

	atomic {
	  if(thisIndex == 0)
            time[iteration*2+1] = CkWallTimer() - start;
	}
      }

      atomic {

	if(thisIndex == 0) {
          for(int i = 0; i < 6; i++)
            CkPrintf("time[%d] = %f sec\n",i,time[i]);
          for(int i = 0; i < 3; i++)
            CkPrintf("memcpy_time[%d] = %f sec\n",i,memcpy_time[i]);
          for(int i = 0; i < 3; i++)
            CkPrintf("transpose_time[%d] = %f sec\n",i,transpose_time[i]);
	}

        if(!validating)
          contribute(CkCallback(CkIndex_Main::doneFFT(), mainProxy));
	else {
          char filename[80];
          sprintf(filename, "%d-%ld.dump%d", numChares, N, thisIndex);
          //writeCommFile(n, in, filename);
          calcResidual();
        }
      }
    };
  };
};
