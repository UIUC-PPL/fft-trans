mainmodule fft1d {

  readonly CProxy_Main mainProxy;
  readonly int numChares;
  readonly int N;

  message fftMsg {
    fftw_complex data[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void startFFT();
    entry void doneFFT();
    entry void printResidual(CkReductionMsg *m);
  };

  array [1D] fft {
    entry fft();
    entry void sendTranspose();
    entry void getTranspose(fftMsg *m);
    entry void initValidation();

    entry void doFFT() {
	for (iteration = 0; iteration < 3; ++iteration) {
	  atomic "transpose" { sendTranspose(); }

	  for (count = 0; count < numChares; ++count)
	    when getTranspose[iteration] (fftMsg *m) atomic {
	      applyTranspose(m);
	    }

	  atomic "compute" {
	    if (iteration < 2)
	      compute(iteration == 0);
	  }
	}

	atomic {
          if(!validating)
            contribute(CkCallback(CkIndex_Main::doneFFT(), mainProxy));
          else {
            char filename[80];
            sprintf(filename,"%d-%d.dump%d",numChares,N,thisIndex);
            writeCommFile(n, in, filename);
            calcResidual();
          }
        }
    };
  };
};
