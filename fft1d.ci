mainmodule fft1d {

  readonly CProxy_Main mainProxy;
  readonly int numChares;
  readonly int N;

  message fftMsg {
    fftw_complex data[];
  };

  mainchare Main {
    entry Main(CkArgMsg *m);
    entry void startTiming();
    entry void done();
  };

  array [1D] fft {
    entry fft();
    entry void sendTranspose();
    entry void getTranspose(fftMsg *m);
    entry void writeResults(int);

    entry void doFFT() {
	for (iteration = 0; iteration < 3; ++iteration) {
	  atomic "transpose" { sendTranspose(); }

	  for (count = 0; count < numChares; ++count)
	    when getTranspose(fftMsg *m) atomic {
	      applyTranspose(m);
              delete(m);
	    }

	  atomic "compute" {
	    if (iteration < 2)
	      compute(iteration == 0);
	  }
	}

	atomic { contribute(CkCallback(CkIndex_Main::done(), mainProxy)); }

	when writeResults(int a) atomic {
	  char filename[80];
	  sprintf(filename,"%d-%d.dump%d",numChares,N,thisIndex);
	  //writeCommFile(n, out, filename);
	  CkPrintf("[%d] copy/comp = %f copy = %f compute = %f twid = %f send = %f\n",thisIndex,copytime/computetime, copytime, computetime, twiddletime, sendtime);
          contribute(CkCallback(CkCallback::ckExit));
	}
    };
  };
};
